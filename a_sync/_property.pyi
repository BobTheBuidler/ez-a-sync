from typing import Awaitable, Generic, TypeVar

__T = TypeVar("__T")

class AwaitableOnly(Generic[__T]):
    """This wraps a coroutine will call it on await."""

    def __init__(self, coro: Awaitable[__T]) -> None: ...
    def __await__(self) -> __T: ...

class _ObjectProxyMethods:
    @property
    def __module__(self): ...
    @__module__.setter
    def __module__(self, value) -> None: ...
    @property
    def __doc__(self): ...
    @__doc__.setter
    def __doc__(self, value) -> None: ...
    @property
    def __dict__(self): ...
    @property
    def __weakref__(self): ...

class _ObjectProxyMetaType(type):
    def __new__(cls, name, bases, dictionary): ...

class ObjectProxy(metaclass=_ObjectProxyMetaType):
    def __init__(self, wrapped) -> None: ...
    @property
    def __class__(self): ...
    @__class__.setter
    def __class__(self, value) -> None: ...
    @property
    def __annotations__(self): ...
    @__annotations__.setter
    def __annotations__(self, value) -> None: ...
    def __dir__(self): ...
    def __bytes__(self) -> bytes: ...
    def __reversed__(self): ...
    def __round__(self): ...
    def __lt__(self, other): ...
    def __le__(self, other): ...
    def __eq__(self, other): ...
    def __ne__(self, other): ...
    def __gt__(self, other): ...
    def __ge__(self, other): ...
    def __hash__(self): ...
    def __bool__(self) -> bool: ...
    def __setattr__(self, name, value) -> None: ...
    def __getattr__(self, name): ...
    def __delattr__(self, name) -> None: ...
    def __add__(self, other): ...
    def __sub__(self, other): ...
    def __mul__(self, other): ...
    def __truediv__(self, other): ...
    def __floordiv__(self, other): ...
    def __mod__(self, other): ...
    def __divmod__(self, other): ...
    def __pow__(self, other, *args): ...
    def __lshift__(self, other): ...
    def __rshift__(self, other): ...
    def __and__(self, other): ...
    def __xor__(self, other): ...
    def __or__(self, other): ...
    def __radd__(self, other): ...
    def __rsub__(self, other): ...
    def __rmul__(self, other): ...
    def __rtruediv__(self, other): ...
    def __rfloordiv__(self, other): ...
    def __rmod__(self, other): ...
    def __rdivmod__(self, other): ...
    def __rpow__(self, other, *args): ...
    def __rlshift__(self, other): ...
    def __rrshift__(self, other): ...
    def __rand__(self, other): ...
    def __rxor__(self, other): ...
    def __ror__(self, other): ...
    def __iadd__(self, other): ...
    def __isub__(self, other): ...
    def __imul__(self, other): ...
    __wrapped__: Incomplete
    def __itruediv__(self, other): ...
    def __ifloordiv__(self, other): ...
    def __imod__(self, other): ...
    def __ipow__(self, other): ...
    def __ilshift__(self, other): ...
    def __irshift__(self, other): ...
    def __iand__(self, other): ...
    def __ixor__(self, other): ...
    def __ior__(self, other): ...
    def __neg__(self): ...
    def __pos__(self): ...
    def __abs__(self): ...
    def __invert__(self): ...
    def __int__(self) -> int: ...
    def __float__(self) -> float: ...
    def __complex__(self) -> complex: ...
    def __oct__(self): ...
    def __hex__(self): ...
    def __index__(self) -> int: ...
    def __len__(self) -> int: ...
    def __contains__(self, value) -> bool: ...
    def __getitem__(self, key): ...
    def __setitem__(self, key, value) -> None: ...
    def __delitem__(self, key) -> None: ...
    def __getslice__(self, i, j): ...
    def __setslice__(self, i, j, value) -> None: ...
    def __delslice__(self, i, j) -> None: ...
    def __enter__(self): ...
    def __exit__(self, *args, **kwargs): ...
    def __iter__(self): ...
    def __copy__(self) -> None: ...
    def __deepcopy__(self, memo) -> None: ...
    def __reduce__(self) -> None: ...
    def __reduce_ex__(self, protocol) -> None: ...
    def __call__(self, *args, **kwargs): ...

class AwaitableProxy(ObjectProxy):
    def __await__(self): ...
    async def __aenter__(self): ...
    async def __aexit__(self, *args, **kwargs): ...
    async def __aiter__(self): ...
    async def __anext__(self): ...
